import os
from google import genai
from google.genai import types
from agents.planner import PlannerAgent
from dotenv import load_dotenv

load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    raise ValueError("❌ GEMINI_API_KEY not found in .env")

client = genai.Client(api_key=api_key)

class DeveloperAgent:
    """
    Generates frontend code based on steps generated by PlannerAgent.
    Creates a single HTML file with inline CSS and JavaScript.
    """

    def __init__(self, model_name="gemini-2.5-flash"):
        self.client = client
        self.model_name = model_name
        self.planner = PlannerAgent()

    def _generate_code(self, prompt: str) -> str:
        """Call Gemini API to generate code."""
        config = types.GenerateContentConfig(temperature=0.2, max_output_tokens=30000)
        response = self.client.models.generate_content(
            model=self.model_name,
            contents=prompt,
            config=config
        )

        code = getattr(response, "text", None)
        if not code and hasattr(response, "candidates"):
            parts = response.candidates[0].content.parts
            code = "".join(p.text for p in parts if hasattr(p, "text"))

        if code:
            code = code.strip()
            if code.startswith("```html"):
                code = code[7:]
            elif code.startswith("```"):
                code = code[3:]
            if code.endswith("```"):
                code = code[:-3]
            return code.strip()
        return None

    def generate_project(self, project_name: str, steps: str):
        """Generate a single HTML file based on PlannerAgent steps."""
        # 1️⃣ Generate steps
        print(f"Generated steps:\n{steps}\n")

        # 2️⃣ Prepare prompt for code generation
        prompt = f"Write a complete HTML file with inline CSS and JavaScript implementing the following steps:\n"
        for i, step in enumerate(steps, 1):
            prompt += f"{i}. {step}\n"

        prompt += """
Requirements:
- Include buttons, inputs, display areas as needed
- Use JavaScript to implement interactive behavior for each step
- Inline CSS for styling
- Return only the complete HTML code
"""

        # 3️⃣ Generate code
        code = self._generate_code(prompt)
        if not code:
            print("❌ Code generation failed.")
            return None

        # 4️⃣ Save file
        os.makedirs("output", exist_ok=True)
        file_path = os.path.join("output", f"{project_name.replace(' ','_')}.html")
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(code)

        print(f"✅ HTML project generated: {file_path}")
        return file_path
